package io.github.msouter.lodgebook.network;

import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;

import io.github.msouter.lodgebook.model.*;

/**
 * Firebase Remote Database Helper
 *
 * Created by Michael Souter on 2017-12-07.
 */

public class RemoteDB {
    private static DatabaseReference sDatabase;

    // Initialize with a reference to the Database location
    public static void initDatabase() { sDatabase = FirebaseDatabase.getInstance().getReference(); }

    /**
     * Get a reference to the Database for the specified object which already exists in database
     *
     * @param o   The object to get a reference for
     * @param iD  The iD of that object already in the database
     * @return    A DatabaseReference to the object on the remote
     */
    public static DatabaseReference getReferenceFor(Object o, String iD) {
        DatabaseReference result = null;
        if (o instanceof User) {
            result = sDatabase.child("users").child(iD);
        } else if (o instanceof Lodge) {
            result = sDatabase.child("lodges").child(iD);
        }
        return result;
    }

    /**
     * Create a new key/ID for a new object to be posted to the remote
     *
     * @param o The object to create a new key for
     * @return  The new key generated by push() to the remote
     */
    public static String createIdFor(Object o) {
        String result = null;
        if (o instanceof Lodge) {
            result = sDatabase.child("lodges").push().getKey();
        }
        return result;
    }

    /**
     * Set a value on the database
     *
     * @param ref Reference to the current object on the remote
     * @param o   New object to be set at the reference
     */
    public static void setValue(DatabaseReference ref, Object o) {
        ref.setValue(o);
    }
}
